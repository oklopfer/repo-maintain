#!/bin/bash


STGDIR="$HOME/.local/share/repo-maintain"
# Bold High Intensity
export BIBlack='\033[1;90m'      # Black
export BIRed='\033[1;91m'        # Red
export BIGreen='\033[1;92m'      # Green
export BIYellow='\033[1;93m'     # Yellow
export BIBlue='\033[1;94m'       # Blue
export BIPurple='\033[1;95m'     # Purple
export BICyan='\033[1;96m'       # Cyan
export BIWhite='\033[1;97m'      # White

# Colors
export BOLD=$(tput bold)
export NORMAL=$(tput sgr0)
export NC='\033[0m'

# Bold
export BBlack='\033[1;30m'       # Black
export BRed='\033[1;31m'         # Red
export BGreen='\033[1;32m'       # Green
export BYellow='\033[1;33m'      # Yellow
export BBlue='\033[1;34m'        # Blue
export BPurple='\033[1;35m'      # Purple
export BCyan='\033[1;36m'        # Cyan
export BWhite='\033[1;37m'       # White

function ask() {
  local prompt default reply

  if [[ ${2:-} = 'Y' ]]; then
    prompt="${BIGreen}Y${NC}/${RED}n${NC}"
    default='Y'
  elif [[ ${2:-} = 'N' ]]; then
    prompt="${GREEN}y${NC}/${BIRed}N${NC}"
    default='N'
  else
    prompt="${GREEN}y${NC}/${RED}n${NC}"
  fi

  while true; do
    # Ask the question (not using "read -p" as it uses stderr not stdout)
    echo -ne "$1 [$prompt] "

    # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
    if [[ -z "$DISABLE_PROMPTS" ]]; then
      read -r reply < /dev/tty
    else
      echo "$default"
      reply=$default
    fi

    # Default?
    if [[ -z $reply ]]; then
      reply=$default
    fi

    # Check if the reply is valid
    case "$reply" in
      Y*|y*) return 0 ;;
      N*|n*) return 1 ;;
    esac
  done
}

# fancy_message allows visually appealing output. Source the code block and run `fancy_message {info,warn,error} "What you want to say"`
function fancy_message() {
  local MESSAGE_TYPE="${1}"
  local MESSAGE="${2}"

  case ${MESSAGE_TYPE} in
    info) echo -e "[${BGreen}+${NC}] INFO: ${MESSAGE}";;
    warn) echo -e "[${BRed}*${NC}] WARNING: ${MESSAGE}";;
    error) echo -e "[${BRed}!${NC}] ERROR: ${MESSAGE}";;
    *) echo -e "[${BOLD}?${NORMAL}] UNKNOWN: ${MESSAGE}";;
  esac
}

function usage {
        echo "$(basename $0) -h --> shows usage"
        echo "$(basename $0) -I --> initializes a pacstall repo"
        echo "$(basename $0) -A --> adds packages to the packagelist"
        echo "$(basename $0) -T --> tests a package in a docker container"
}

case "$1" in
    -I|--init)
        if [ -z "$(\ls -A .)" ]; then
            fancy_message info "Creating repo in $(pwd)"
            mkdir -p packages
            touch packagelist
            mkdir -p packages/neofetch
            echo 'name="neofetch"
pkgname="neofetch"
version="7.1.0"
url="https://github.com/dylanaraps/neofetch/archive/7.1.0.zip"
build_depends=""
depends=""
optdepends=("w3m-img: image preview"
"libsixel-dev: image preview"
"catimg: image preview"
"jp2a: image preview"
"caca-utils: image preview"
"libcaca-dev: image preview")
description="Neofetch is a command-line system information tool written in bash 3.2+"
hash="e610da6561f17c8161337d0c4115da310be576e8699fa2add64e14eeb3f3dcf1"

prepare() {
    true
}

build() {
    true 
}

install() {
    sudo make install DESTDIR=/usr/src/pacstall/neofetch
}' > packages/neofetch/neofetch.pacscript
        git init
        git add .
        git commit -m "init: Created repo and added neofetch"
        exit
    else
        fancy_message warn "Directory not empty"
        exit 1
    fi
    ;;

    -A|--add)
        DIR=$(pwd)
        cd packages
        if ! cd packages; then
            fancy_message error "Cannot enter packages directory"
            exit 1
        else
            echo $(for i in $(/bin/ls -d */); do echo ${i%%/}; done) > ../packagelist
            fancy_message info "add: Updated packagelist"
        fi
        cd "$DIR"
    ;;

    -T|--test)
        # Get's date for tmp file
        DATE=$(date +%s%N)
        # Get's full input, could be ~/myscript.pacscript or just mypacscript.pacscript
        INPUT="$2"
        # Get's the basename, so `/home/henry/mypacscript.pacscript` -> `mypacscript.pacscript`
        FILE=$(basename $INPUT)
        # Get the name of a file, so `alacritty.pacscript` -> `alacritty`
        NAME=$(echo $FILE | cut -d. -f1)
        # Get's the name of $FILE without the .pacscript extension
        BASENAME=$(echo $INPUT | cut -d. -f1)
        # Pulls ubuntu image if not installed or if installed, checks for updates
        docker pull ubuntu
        # copy our default docker script to /tmp
        mkdir -p "$STGDIR"
        mkdir -p /tmp/mr-$DATE
        cp "$STGDIR"/docker.sh /tmp/mr-$DATE/docker.sh 
        # This is complicated, so heres a simple example (the pacscript won't work, but just imagine it's a full script)
        #
        # $ cat my.pacscript
        # name="test"
        # url="https://github.com/test/test"
        #
        # Will turn into this:
        #
        # echo 'name="test"
        # url="https://github.com/test/test"' > my.pacscript
        #
        # So basically we're taking the contents of the pacscript, and turning it into a mini script inside echo that could be run by bash
        echo "echo '$(cat $INPUT)"\'" > $FILE" | tee -a /tmp/mr-$DATE/docker.sh
        # Add the final bit that will append the command to install the pacscript in the docker container
        echo "pacstall -Il $NAME" | tee -a /tmp/mr-$DATE/docker.sh
        docker container run -i ubuntu:latest /bin/bash -s < /tmp/mr-"$DATE"/docker.sh
    ;;
    *)
        usage
        exit 1
        ;;
esac

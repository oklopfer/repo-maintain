#!/bin/bash


STGDIR="$HOME/.local/share/repo-maintain"
# Bold High Intensity
export BIBlack='\033[1;90m'      # Black
export BIRed='\033[1;91m'        # Red
export BIGreen='\033[1;92m'      # Green
export BIYellow='\033[1;93m'     # Yellow
export BIBlue='\033[1;94m'       # Blue
export BIPurple='\033[1;95m'     # Purple
export BICyan='\033[1;96m'       # Cyan
export BIWhite='\033[1;97m'      # White

# Colors
export BOLD=$(tput bold)
export NORMAL=$(tput sgr0)
export NC='\033[0m'

# Bold
export BBlack='\033[1;30m'       # Black
export BRed='\033[1;31m'         # Red
export BGreen='\033[1;32m'       # Green
export BYellow='\033[1;33m'      # Yellow
export BBlue='\033[1;34m'        # Blue
export BPurple='\033[1;35m'      # Purple
export BCyan='\033[1;36m'        # Cyan
export BWhite='\033[1;37m'       # White

function ask() {
  local prompt default reply

  if [[ ${2:-} = 'Y' ]]; then
    prompt="${BIGreen}Y${NC}/${RED}n${NC}"
    default='Y'
  elif [[ ${2:-} = 'N' ]]; then
    prompt="${GREEN}y${NC}/${BIRed}N${NC}"
    default='N'
  else
    prompt="${GREEN}y${NC}/${RED}n${NC}"
  fi

  while true; do
    # Ask the question (not using "read -p" as it uses stderr not stdout)
    echo -ne "$1 [$prompt] "

    # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
    if [[ -z "$DISABLE_PROMPTS" ]]; then
      read -r reply < /dev/tty
    else
      echo "$default"
      reply=$default
    fi

    # Default?
    if [[ -z $reply ]]; then
      reply=$default
    fi

    # Check if the reply is valid
    case "$reply" in
      Y*|y*) return 0 ;;
      N*|n*) return 1 ;;
    esac
  done
}

# fancy_message allows visually appealing output. Source the code block and run `fancy_message {info,warn,error} "What you want to say"`
function fancy_message() {
  local MESSAGE_TYPE="${1}"
  local MESSAGE="${2}"

  case ${MESSAGE_TYPE} in
    info) echo -e "[${BGreen}+${NC}] INFO: ${MESSAGE}";;
    warn) echo -e "[${BRed}*${NC}] WARNING: ${MESSAGE}";;
    error) echo -e "[${BRed}!${NC}] ERROR: ${MESSAGE}" >&2;;
    *) echo -e "[${BOLD}?${NORMAL}] UNKNOWN: ${MESSAGE}";;
  esac
}

function usage {
        echo "$(basename $0) -h --> shows usage"
        echo "$(basename $0) -I --> initializes a pacstall repo"
        echo "$(basename $0) -A --> adds packages to the packagelist"
        echo "$(basename $0) -T --> tests a package in a docker container"
}

case "$1" in
    -I|--init)
        # Checks if user gave -I input: `mr -I my_repo` would create my_repo and cd into it
        if [[ -n "$2" ]]; then
            # This will create a directory, but if mkdir fails (the directory exists already), then fancy_message error it and quit
            mkdir "$2" || { fancy_message error "Directory already exists"; exit 1; }
            cd "$2"
        fi
        # Else, check if pwd is empty
        if [[ -z "$(\ls -A .)" ]]; then
            fancy_message info "Creating repo in $(pwd)"
            mkdir -p packages
            touch packagelist
            # Add neofetch to the repo, because why not (btw i use arch)
            mkdir -p packages/neofetch
            echo 'name="neofetch"
pkgname="neofetch"
version="7.1.0"
url="https://github.com/dylanaraps/neofetch/archive/7.1.0.zip"
optdepends=("w3m-img: image preview"
"libsixel-dev: image preview"
"catimg: image preview"
"jp2a: image preview"
"caca-utils: image preview"
"libcaca-dev: image preview")
description="Neofetch is a command-line system information tool written in bash 3.2+"
hash="e610da6561f17c8161337d0c4115da310be576e8699fa2add64e14eeb3f3dcf1"

prepare() {
    true
}

build() {
    true
}

install() {
    sudo make install DESTDIR=/usr/src/pacstall/neofetch
}' > packages/neofetch/neofetch.pacscript
        # Create a git repo
        git init -q
        # Make github detect anything ending with .pacscript as a shell script
        echo '*.pacscript linguist-language=Shell' > .gitattributes
        # Add and commit it
        git commit -am "init: Create repo, create gitattributes, and add neofetch"  &>/dev/null
        exit
    # If the directory does contain something
    else
        fancy_message warn "Directory not empty"
        exit 1
    fi
    ;;

    -U|--update)
        DIR=$(pwd)
        if ! cd packages; then
            fancy_message error "Cannot enter packages directory"
            exit 1
        else
            # This fancy line will output the contents of the current directory in a single line, alphabeticaly ordered
            /bin/ls -1aA > ../packagelist
            git commit -am "Updated packagelist"
        fi
        # Then cd back into where we were before
        cd "$DIR"
    ;;

    -A|--add)
        # Checks if user inputed anything
        if [[ -z $2 ]]; then
            fancy_message error "Specify a pacscript"
            exit 1
        fi
        # Checks for broken repos
        if ! [[ -f packagelist ]]; then
            fancy_message error "This repo is broken (missing packagelist)"
            exit 1
        fi
        if [[ -d packages ]]; then
            fancy_message error "This repo is broken (missing packages dir)"
        fi
        INPUT="$2"
        # Check if beginning of input contains http (I'll assume that means the input is a url) and if it is true, then trigger the download process of that file
        if [[ $INPUT == http* ]]; then
            # This will get the ending of the url, so `https://raw.githubusercontent.com/pacstall/pacstall-programs/master/packages/blang-git/blang-git.pacscript` -> `blang-git.pacscript` and then cutting of the `.pacscript` at the end so we can identify the package name
            PACSCRIPT=$(echo "${NAME##*/}" | cut -d. -f1)
            # Make the directory
            mkdir -p packages/"$PACSCRIPT"
            # Download with a spicy progress bar to `packages/$PACSCRIPT`
            wget -q --show-progress --progress=bar:force "$INPUT" -P packages/"$PACSCRIPT" 2>&1
        # If the beginning of the input does not contain `http`, then assume the input is a local file
        else
            NAME=$(echo $INPUT | cut -d. -f1 | sed 's|.*/||')
            mkdir -p packages/$NAME
            # This is not a typo. Putting \ in front of a command makes it bypass aliases, and a lot of distros alias `cp` -> `cp -i` but we don't want that
            \cp -rf $INPUT packages/$NAME/
        fi
    ;;
    -T|--test)
        if [[ -z $2 ]]; then
            fancy_message error "Specify a pacscript"
            exit 1
        fi
        # Get's date for tmp file
        DATE=$(date +%s%N)
        # Get's full input, could be ~/myscript.pacscript or just mypacscript.pacscript
        INPUT="$2"
        # Get's the basename, so `/home/henry/mypacscript.pacscript` -> `mypacscript.pacscript`
        FILE=$(basename $INPUT)
        # Get the name of a file, so `alacritty.pacscript` -> `alacritty`
        NAME=$(echo $FILE | cut -d. -f1)
        # Get's the name of $FILE without the .pacscript extension
        BASENAME=$(echo $INPUT | cut -d. -f1)
        # Pulls ubuntu image if not installed or if installed, checks for updates
        docker pull ubuntu
        # copy our default docker script to /tmp
        mkdir -p "$STGDIR"
        mkdir -p /tmp/mr-$DATE
        cp "$STGDIR"/docker.sh /tmp/mr-$DATE/docker.sh
        # This is complicated, so heres a simple example (the pacscript won't work, but just imagine it's a full script)
        #
        # $ cat my.pacscript
        # name="test"
        # url="https://github.com/test/test"
        #
        # Will turn into this:
        #
        # echo 'name="test"
        # url="https://github.com/test/test"' > my.pacscript
        #
        # So basically we're taking the contents of the pacscript, and turning it into a mini script inside echo that could be run by bash
        echo "echo '$(cat $INPUT)"\'" > $FILE" | tee -a /tmp/mr-$DATE/docker.sh >/dev/null
        # Add the final bit that will append the command to install the pacscript in the docker container
        echo "pacstall -Il $NAME" | tee -a /tmp/mr-$DATE/docker.sh >/dev/null
        docker container run -i pacstall:latest /bin/bash -s < /tmp/mr-"$DATE"/docker.sh
    ;;
    *)
        usage
        exit 1
        ;;
esac


# Other commands that are useful but are too small to put into a flag
# curl -s https://raw.githubusercontent.com/pacstall/pacstall-programs/master/packagelist | wc -l # gets total package count from pacstall/pacstall-programs repo
